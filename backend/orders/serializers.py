# orders/serializers.py

from rest_framework import serializers
from django.db.models import Sum, F, DecimalField
from rest_framework_simplejwt.serializers import TokenObtainPairSerializer
from decimal import Decimal
from menu.models import Dish
from customers.models import Customer
from .models import Order, OrderItem
from billing.models import Bill
from customers.serializers import CustomerSerializer
from billing.serializers import BillSerializer
# ====================================================================
#  Token Serializer
# ====================================================================
class MyTokenObtainPairSerializer(TokenObtainPairSerializer):
    @classmethod
    def get_token(cls, user):
        token = super().get_token(user)
        token['username'] = user.username
        token['is_staff'] = user.is_staff
        token['is_superuser'] = user.is_superuser
        return token
class CustomerNameSerializer(serializers.ModelSerializer):
    # We create a custom 'name' field that will be generated by the method below
    name = serializers.SerializerMethodField()

    class Meta:
        model = Customer
        # The 'name' in this list now refers to our custom method field
        fields = ['name']

    def get_name(self, obj):
        # This method creates the full name.
        # COMMON CASE 1: If your Customer model is linked to a User model
        if hasattr(obj, 'user') and obj.user.first_name:
            return f"{obj.user.first_name} {obj.user.last_name}".strip()
        
        # COMMON CASE 2: If your Customer model has a field called 'full_name'
        if hasattr(obj, 'full_name'):
             return obj.full_name

        # FALLBACK: If no name is found, return the phone number
        return obj.phone_number

# ADD THIS HELPER
class BillDetailsSerializer(serializers.ModelSerializer):
    # Create a custom 'payment_status' field that will be generated by our method
    payment_status = serializers.SerializerMethodField()

    class Meta:
        model = Bill
        # 'payment_status' now refers to the method field.
        # 'coins_redeemed' is a real field on the Bill model, so it works correctly.
        fields = ['payment_status', 'coins_redeemed']

    def get_payment_status(self, obj):
        # This is the translation logic: 
        # If the bill's 'is_paid' field is True, return the string "Paid".
        # Otherwise, return the string "Unpaid".
        return "Paid" if obj.is_paid else "Unpaid"
# ====================================================================
#  Nested "Read-Only" Serializers
# ====================================================================
class DishForOrderItemSerializer(serializers.ModelSerializer):
    class Meta:
        model = Dish
        fields = ['id', 'name', 'price', 'food_type', 'image_url']

class OrderItemSerializer(serializers.ModelSerializer):
    dish = DishForOrderItemSerializer(read_only=True)
    class Meta:
        model = OrderItem
        fields = ['id', 'dish', 'quantity']

class MinimalBillSerializer(serializers.ModelSerializer):
    class Meta:
        model = Bill
        fields = ['id', 'is_paid']

# ====================================================================
#  Main OrderSerializer (For Reading Data)
# ====================================================================
class OrderSerializer(serializers.ModelSerializer):
    customer = CustomerSerializer(read_only=True)
    items = OrderItemSerializer(many=True, read_only=True)
    bill = BillSerializer(read_only=True)
    payment_status = serializers.SerializerMethodField()
    total_amount = serializers.SerializerMethodField()

    class Meta:
        model = Order
        fields = [
            'id', 'customer', 'status', 'created_at', 'items', 
            'table_number', 'bill', 'payment_status', 'total_amount'
        ]

    def get_payment_status(self, obj):
        if obj.bill and obj.bill.is_paid:
            return "Paid"
        return "Unpaid"

    def get_total_amount(self, obj):
        total = obj.items.aggregate(
            total=Sum(F('quantity') * F('dish__price'), output_field=DecimalField())
        )['total']
        return total or 0.00

# ====================================================================
#  Write-Only Serializer (For POS and Customer Orders)
# ====================================================================
class OrderItemWriteSerializer(serializers.ModelSerializer):
    class Meta:
        model = OrderItem
        fields = ['dish', 'quantity']

class OrderWriteSerializer(serializers.ModelSerializer):
    items = OrderItemWriteSerializer(many=True)
    customer = serializers.PrimaryKeyRelatedField(
        queryset=Customer.objects.all(), required=False, allow_null=True
    )

    class Meta:
        model = Order
        fields = ['customer', 'table_number', 'items']

    def create(self, validated_data):
        items_data = validated_data.pop('items')
        order = Order.objects.create(**validated_data)
        for item_data in items_data:
            OrderItem.objects.create(order=order, **item_data)
        return order

# ====================================================================
#  Other Specific-Purpose Serializers
# ====================================================================
class RecentOrderSerializer(serializers.ModelSerializer):
    customer = CustomerSerializer(read_only=True)
    items = OrderItemSerializer(many=True, read_only=True)
    payment_status = serializers.SerializerMethodField()
    total_amount = serializers.SerializerMethodField()
    discount_amount = serializers.SerializerMethodField()

    class Meta:
        model = Order
        fields = [
            'id', 'customer', 'table_number', 'total_amount', 'discount_amount',
            'status', 'payment_status', 'created_at', 'items'
        ]

    def get_payment_status(self, obj):
        if hasattr(obj, 'bill') and obj.bill and obj.bill.is_paid:
            return "Paid"
        return "Unpaid"

    def get_total_amount(self, obj):
        total = obj.items.aggregate(
            total=Sum(F('quantity') * F('dish__price'), output_field=DecimalField())
        )['total']
        return total or 0.00
    
    def get_discount_amount(self, obj):
        if hasattr(obj, 'bill') and obj.bill:
            return obj.bill.discount_amount
        return 0.00
    
# --- FIX: This serializer now correctly uses OrderItemSerializer ---
class OrderSerializerForBilling(serializers.ModelSerializer):
    # This was the source of the bug. It now correctly includes the list of items.
    items = OrderItemSerializer(many=True, read_only=True)

    class Meta:
        model = Order
        fields = ['id', 'status', 'items']
class DashboardOrderSerializer(serializers.ModelSerializer):
    customer = CustomerNameSerializer(read_only=True)
    items = OrderItemSerializer(many=True, read_only=True)
    
    # Use the helper serializer for the bill
    bill = BillDetailsSerializer(read_only=True)

    # These fields will pull data directly from the related Bill model
    total_amount = serializers.DecimalField(source='bill.subtotal', max_digits=10, decimal_places=2, read_only=True)
    tax_amount = serializers.DecimalField(source='bill.tax_amount', max_digits=10, decimal_places=2, read_only=True)
    final_amount = serializers.DecimalField(source='bill.final_amount', max_digits=10, decimal_places=2, read_only=True)
    
    # Calculate total discount by combining coin and applied discounts
    total_discount = serializers.SerializerMethodField()
    
    class Meta:
        model = Order
        fields = [
            'id', 'status', 'created_at', 'table_number', 'customer', 'items',
            'total_amount', 'tax_amount', 'total_discount', 'final_amount', 'bill'
        ]

    def get_total_discount(self, obj):
        # Safely access bill and its fields, providing defaults if they don't exist
        if hasattr(obj, 'bill') and obj.bill:
            coin_discount = obj.bill.coin_discount or Decimal('0.00')
            promo_discount = obj.bill.discount_amount or Decimal('0.00')
            return coin_discount + promo_discount
        return Decimal('0.00')